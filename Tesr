Of course. Here is a comprehensive guide to creating a startup-ready React project boilerplate with your specified technologies. This setup is robust, scalable, and includes best practices for modern web development.
1. Project Initialization with Vite
First, let's create a new React project using Vite with the TypeScript template.
npm create vite@latest my-startup-app -- --template react-ts
cd my-startup-app
npm install

2. Tailwind CSS & Material-UI Integration
This combination gives you the best of both worlds: the utility-first approach of Tailwind for rapid custom styling and the rich, pre-built components of Material-UI.
Installation
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

npm install @mui/material @emotion/react @emotion/styled @mui/icons-material

Configuration
tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  corePlugins: {
    // Disable Preflight to avoid conflicts with Material-UI's CssBaseline
    preflight: false,
  },
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

src/styles/main.css
@tailwind base;
@tailwind components;
@tailwind utilities;

src/main.tsx
Import the CSS file.
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles/main.css'; // Import Tailwind CSS

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);

Material-UI Theme Setup
Create a theme file to ensure consistency.
src/styles/theme.ts
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#dc004e',
    },
  },
});

export default theme;

App.tsx
Wrap your application with ThemeProvider and CssBaseline.
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import theme from './styles/theme';

function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      {/* The rest of your app */}
    </ThemeProvider>
  );
}

export default App;

3. Redux Toolkit & RTK Query
For state management, Redux Toolkit is the standard. RTK Query simplifies data fetching and caching.
Installation
npm install @reduxjs/toolkit react-redux

Setup
src/app/store.ts
import { configureStore } from '@reduxjs/toolkit';
import { setupListeners } from '@reduxjs/toolkit/query';
import { userApi } from '../api/userApi';
import authReducer from '../store/authSlice';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    [userApi.reducerPath]: userApi.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(userApi.middleware),
});

setupListeners(store.dispatch);

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

src/store/authSlice.ts (Example Slice)
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface AuthState {
  token: string | null;
  isAuthenticated: boolean;
}

const initialState: AuthState = {
  token: null,
  isAuthenticated: false,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    setToken: (state, action: PayloadAction<string>) => {
      state.token = action.payload;
      state.isAuthenticated = true;
    },
    logout: (state) => {
      state.token = null;
      state.isAuthenticated = false;
    },
  },
});

export const { setToken, logout } = authSlice.actions;
export default authSlice.reducer;

src/api/userApi.ts (RTK Query Example)
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const userApi = createApi({
  reducerPath: 'userApi',
  baseQuery: fetchBaseQuery({ baseUrl: 'https://api.example.com/' }),
  endpoints: (builder) => ({
    getUserById: builder.query<any, string>({
      query: (id) => `users/${id}`,
    }),
  }),
});

export const { useGetUserByIdQuery } = userApi;

main.tsx
Wrap your app in the Provider.
import { Provider } from 'react-redux';
import { store } from './app/store';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>,
);

4. React Router with Lazy Loading
React Router is essential for navigation. Lazy loading routes improves initial load time.
Installation
npm install react-router-dom

Setup
src/routes/AppRoutes.tsx
import { lazy, Suspense } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';

// Lazy load pages
const HomePage = lazy(() => import('../pages/HomePage'));
const LoginPage = lazy(() => import('../pages/LoginPage'));
const NotFoundPage = lazy(() => import('../pages/NotFoundPage'));

const AppRoutes = () => (
  <Router>
    <Suspense fallback={<div>Loading...</div>}>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/login" element={<LoginPage />} />
        <Route path="*" element={<NotFoundPage />} />
      </Routes>
    </Suspense>
  </Router>
);

export default AppRoutes;

App.tsx
Render AppRoutes within your main App component.
// ... other imports
import AppRoutes from './routes/AppRoutes';

function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <AppRoutes />
    </ThemeProvider>
  );
}

5. React Hook Form & Zod
For powerful and type-safe forms, this combination is unmatched.
Installation
npm install react-hook-form zod @hookform/resolvers

Setup
src/utils/validationSchemas.ts
import { z } from 'zod';

export const loginSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

export type LoginSchema = z.infer<typeof loginSchema>;

src/pages/LoginPage.tsx (Example Usage)
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { loginSchema, LoginSchema } from '../utils/validationSchemas';
import { TextField, Button, Box, Typography } from '@mui/material';

const LoginPage = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<LoginSchema>({
    resolver: zodResolver(loginSchema),
  });

  const onSubmit = (data: LoginSchema) => {
    console.log(data);
    // Handle login logic
  };

  return (
    <Box
      component="form"
      onSubmit={handleSubmit(onSubmit)}
      className="max-w-md mx-auto mt-10 p-4 border rounded"
    >
      <Typography variant="h4" className="mb-4 text-center">Login</Typography>
      <TextField
        {...register('email')}
        label="Email"
        fullWidth
        margin="normal"
        error={!!errors.email}
        helperText={errors.email?.message}
      />
      <TextField
        {...register('password')}
        label="Password"
        type="password"
        fullWidth
        margin="normal"
        error={!!errors.password}
        helperText={errors.password?.message}
      />
      <Button type="submit" variant="contained" color="primary" fullWidth>
        Login
      </Button>
    </Box>
  );
};

export default LoginPage;

6. i18n Translation
i18next is a powerful internationalization framework.
Installation
npm install react-i18next i18next i18next-http-backend

Setup
public/locales/en/translation.json
{
  "welcome": "Welcome to the App",
  "login": "Login"
}

public/locales/vi/translation.json
{
  "welcome": "Chào mừng đến với ứng dụng",
  "login": "Đăng nhập"
}

src/i18n/i18n.ts
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import HttpApi from 'i18next-http-backend';

i18n
  .use(HttpApi)
  .use(initReactI18next)
  .init({
    supportedLngs: ['en', 'vi'],
    fallbackLng: 'en',
    debug: process.env.NODE_ENV === 'development',
    interpolation: {
      escapeValue: false,
    },
    backend: {
      loadPath: '/locales/{{lng}}/{{ns}}.json',
    },
  });

export default i18n;

main.tsx
Import the i18n configuration.
// ... other imports
import './i18n/i18n'; // Import i18n configuration

// ... rest of the file

Example Usage
import { useTranslation } from 'react-i18next';

const MyComponent = () => {
  const { t, i18n } = useTranslation();

  const changeLanguage = (lng: 'en' | 'vi') => {
    i18n.changeLanguage(lng);
  };

  return (
    <div>
      <h1>{t('welcome')}</h1>
      <button onClick={() => changeLanguage('en')}>English</button>
      <button onClick={() => changeLanguage('vi')}>Tiếng Việt</button>
    </div>
  );
};

7. Axios with Interceptors
Axios is a popular HTTP client. Interceptors are perfect for handling authentication tokens and errors globally.
Installation
npm install axios

Setup
src/api/axiosClient.ts
import axios from 'axios';
import { store } from '../app/store';

const axiosClient = axios.create({
  baseURL: 'https://api.example.com/api',
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request Interceptor
axiosClient.interceptors.request.use(
  (config) => {
    const token = store.getState().auth.token;
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response Interceptor
axiosClient.interceptors.response.use(
  (response) => {
    return response.data;
  },
  (error) => {
    // Handle errors globally
    if (error.response?.status === 401) {
      // Handle unauthorized access, e.g., redirect to login
    }
    return Promise.reject(error);
  }
);

export default axiosClient;

8. ESLint + Prettier + Husky
Enforce code quality and consistency automatically.
Installation
npm install -D eslint prettier eslint-config-prettier eslint-plugin-react-hooks eslint-plugin-react-refresh husky lint-staged

Configuration
.eslintrc.cjs
Vite's default is a good starting point. You can extend it.
module.exports = {
  // ... existing config
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
    'prettier', // Add prettier to the end
  ],
  // ...
};

.prettierrc
{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "es5"
}

package.json
Add scripts for linting and formatting.
"scripts": {
  // ...
  "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
  "format": "prettier --write ."
},

Setup Husky & lint-staged
npx husky init
npm set-script prepare "husky"

This creates a .husky directory. Now, create a pre-commit hook.
npx husky add .husky/pre-commit "npx lint-staged"

Create a .lintstagedrc.json file:
{
  "*.{js,jsx,ts,tsx}": ["eslint --fix", "prettier --write"],
  "*.{json,css,md}": ["prettier --write"]
}

Now, your code will be automatically linted and formatted before each commit.
9. Custom Hooks
Here are implementations for your requested custom hooks.
src/hooks/useAuth.ts
This hook provides easy access to the authentication state from your Redux store.
import { useSelector } from 'react-redux';
import { RootState } from '../app/store';

export const useAuth = () => {
  const { isAuthenticated, token } = useSelector((state: RootState) => state.auth);
  return { isAuthenticated, token };
};

src/hooks/useDebounce.ts
Useful for delaying a function call, like for search inputs.
import { useState, useEffect } from 'react';

export const useDebounce = <T>(value: T, delay: number): T => {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

src/hooks/useFetch.ts
A simple fetch hook if you don't want to use RTK Query for a specific, simple case.
import { useState, useEffect } from 'react';
import axiosClient from '../api/axiosClient';

interface FetchState<T> {
  data: T | null;
  loading: boolean;
  error: Error | null;
}

export const useFetch = <T>(url: string): FetchState<T> => {
  const [state, setState] = useState<FetchState<T>>({
    data: null,
    loading: true,
    error: null,
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axiosClient.get<T>(url);
        setState({ data: response, loading: false, error: null });
      } catch (error) {
        setState({ data: null, loading: false, error: error as Error });
      }
    };

    fetchData();
  }, [url]);

  return state;
};

Recommendations for Improvement
 * Component Library: Create a src/components/common directory for reusable components like Button, Input, Card, etc., that are styled with Tailwind and/or wrap Material-UI components.
 * Environment Variables: Use .env files (.env.development, .env.production) to manage API URLs and other configuration variables. Vite has built-in support for this.
 * Storybook: For larger projects, consider adding Storybook to develop and document your UI components in isolation.
 * Testing: Implement a testing strategy with Vitest (Vite's native test runner, Jest-compatible) and React Testing Library for unit and integration tests.
 * Absolute Imports: Configure tsconfig.json to allow absolute imports (e.g., import { Button } from '@/components/common') for cleaner import paths.
   tsconfig.json
   {
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  }
}

--------—-------
Absolutely. Here is the complete code for the React startup boilerplate, organized by file and directory.
1. Root Configuration Files
These files configure the project's tools, dependencies, and settings.
package.json
This file lists all project dependencies and scripts. You can generate package-lock.json by running npm install.
{
  "name": "my-startup-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "format": "prettier --write .",
    "prepare": "husky"
  },
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@hookform/resolvers": "^3.6.0",
    "@mui/icons-material": "^5.15.20",
    "@mui/material": "^5.15.20",
    "@reduxjs/toolkit": "^2.2.5",
    "axios": "^1.7.2",
    "i18next": "^23.11.5",
    "i18next-http-backend": "^2.5.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.51.5",
    "react-i18next": "^14.1.2",
    "react-redux": "^9.1.2",
    "react-router-dom": "^6.23.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@typescript-eslint/eslint-plugin": "^7.13.0",
    "@typescript-eslint/parser": "^7.13.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.5",
    "postcss": "^8.4.38",
    "prettier": "^3.3.2",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.4.5",
    "vite": "^5.2.13"
  }
}

.lintstagedrc.json
{
  "*.{js,jsx,ts,tsx}": ["eslint --fix", "prettier --write"],
  "*.{json,css,md}": ["prettier --write"]
}

.husky/pre-commit
This file is generated by the npx husky add command.
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

npx lint-staged

vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
});

tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  corePlugins: {
    preflight: false, // Important to disable Tailwind's base styles
  },
  theme: {
    extend: {},
  },
  plugins: [],
};

postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

.eslintrc.cjs
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
    'prettier', // Make sure this is the last one
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
};

.prettierrc
{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "es5"
}

2. Public Directory
Files in this directory are served directly by the development server.
public/index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>React Startup App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

public/locales/en/translation.json
{
  "header": {
    "home": "Home",
    "login": "Login",
    "logout": "Logout"
  },
  "homePage": {
    "title": "Welcome to the Homepage!",
    "content": "This is a protected page. You can only see this if you are logged in."
  },
  "loginPage": {
    "title": "Login",
    "emailLabel": "Email Address",
    "passwordLabel": "Password"
  },
  "notFound": {
    "title": "404 - Not Found",
    "message": "The page you are looking for does not exist."
  }
}

public/locales/vi/translation.json
{
  "header": {
    "home": "Trang Chủ",
    "login": "Đăng Nhập",
    "logout": "Đăng Xuất"
  },
  "homePage": {
    "title": "Chào mừng đến Trang Chủ!",
    "content": "Đây là một trang được bảo vệ. Bạn chỉ có thể thấy nội dung này nếu đã đăng nhập."
  },
  "loginPage": {
    "title": "Đăng Nhập",
    "emailLabel": "Địa chỉ Email",
    "passwordLabel": "Mật khẩu"
  },
  "notFound": {
    "title": "404 - Không Tìm Thấy",
    "message": "Trang bạn đang tìm kiếm không tồn tại."
  }
}

3. Src Directory
This is the core of your application.
src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';

import App from './App';
import { store } from './app/store';
import theme from './styles/theme';
import './i18n/i18n'; // Initialize i18n
import './styles/main.css'; // Import Tailwind CSS

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <Provider store={store}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <App />
      </ThemeProvider>
    </Provider>
  </React.StrictMode>
);

src/App.tsx
import AppRoutes from '@/routes/AppRoutes';

function App() {
  return <AppRoutes />;
}

export default App;

src/api/axiosClient.ts
import axios, { AxiosError } from 'axios';
import { store } from '@/app/store';
import { logout } from '@/store/authSlice';

const axiosClient = axios.create({
  baseURL: 'https://reqres.in/api', // Using a public mock API for example
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request Interceptor: Add token to headers
axiosClient.interceptors.request.use(
  (config) => {
    const token = store.getState().auth.token;
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response Interceptor: Handle global errors
axiosClient.interceptors.response.use(
  (response) => response.data,
  (error: AxiosError) => {
    if (error.response?.status === 401) {
      // Dispatch logout action if token is invalid or expired
      store.dispatch(logout());
      // Optionally redirect to login page
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default axiosClient;

src/api/userApi.ts
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { RootState } from '@/app/store';

// Define a service using a base URL and expected endpoints
export const userApi = createApi({
  reducerPath: 'userApi',
  baseQuery: fetchBaseQuery({
    baseUrl: 'https://reqres.in/api/',
    prepareHeaders: (headers, { getState }) => {
      const token = (getState() as RootState).auth.token;
      if (token) {
        headers.set('authorization', `Bearer ${token}`);
      }
      return headers;
    },
  }),
  endpoints: (builder) => ({
    getUserById: builder.query<{ data: any }, string>({
      query: (id) => `users/${id}`,
    }),
  }),
});

export const { useGetUserByIdQuery } = userApi;

src/app/store.ts
import { configureStore } from '@reduxjs/toolkit';
import { setupListeners } from '@reduxjs/toolkit/query';
import authReducer from '@/store/authSlice';
import { userApi } from '@/api/userApi';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    [userApi.reducerPath]: userApi.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(userApi.middleware),
});

setupListeners(store.dispatch);

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

src/components/layout/Header.tsx
import { Link as RouterLink, useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { useDispatch } from 'react-redux';
import { AppBar, Toolbar, Typography, Button, Box } from '@mui/material';
import { useAuth } from '@/hooks/useAuth';
import { logout } from '@/store/authSlice';

const Header = () => {
  const { t, i18n } = useTranslation();
  const { isAuthenticated } = useAuth();
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleLogout = () => {
    dispatch(logout());
    navigate('/login');
  };

  const changeLanguage = (lang: 'en' | 'vi') => {
    i18n.changeLanguage(lang);
  };

  return (
    <AppBar position="static">
      <Toolbar>
        <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
          <RouterLink to="/" className="text-white no-underline">
            StartupCo
          </RouterLink>
        </Typography>

        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Button color="inherit" component={RouterLink} to="/">
            {t('header.home')}
          </Button>

          {isAuthenticated ? (
            <Button color="inherit" onClick={handleLogout}>
              {t('header.logout')}
            </Button>
          ) : (
            <Button color="inherit" component={RouterLink} to="/login">
              {t('header.login')}
            </Button>
          )}

          <Button onClick={() => changeLanguage('en')} sx={{ color: 'white', marginLeft: 2, border: i18n.language === 'en' ? '1px solid white' : 'none' }}>EN</Button>
          <Button onClick={() => changeLanguage('vi')} sx={{ color: 'white', border: i18n.language === 'vi' ? '1px solid white' : 'none' }}>VI</Button>
        </Box>
      </Toolbar>
    </AppBar>
  );
};

export default Header;

src/hooks/useAuth.ts
import { useSelector } from 'react-redux';
import { RootState } from '@/app/store';

export const useAuth = () => {
  const { isAuthenticated, token, user } = useSelector(
    (state: RootState) => state.auth
  );
  return { isAuthenticated, token, user };
};

src/hooks/useDebounce.ts
import { useState, useEffect } from 'react';

export const useDebounce = <T>(value: T, delay: number): T => {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

src/hooks/useFetch.ts
import { useState, useEffect, useCallback } from 'react';
import axiosClient from '@/api/axiosClient';

interface FetchState<T> {
  data: T | null;
  loading: boolean;
  error: Error | null;
}

export const useFetch = <T>(url: string): FetchState<T> => {
  const [state, setState] = useState<FetchState<T>>({
    data: null,
    loading: true,
    error: null,
  });

  const fetchData = useCallback(async () => {
    setState({ data: null, loading: true, error: null });
    try {
      const response = await axiosClient.get<T>(url);
      setState({ data: response, loading: false, error: null });
    } catch (error) {
      setState({ data: null, loading: false, error: error as Error });
    }
  }, [url]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  return state;
};

src/i18n/i18n.ts
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import HttpApi from 'i18next-http-backend';

i18n
  .use(HttpApi) // Load translations via http
  .use(initReactI18next) // Pass i18n instance to react-i18next
  .init({
    supportedLngs: ['en', 'vi'],
    fallbackLng: 'en',
    debug: import.meta.env.DEV, // Log in development mode
    interpolation: {
      escapeValue: false, // React already safes from xss
    },
    backend: {
      loadPath: '/locales/{{lng}}/{{ns}}.json', // Path to translation files
    },
  });

export default i18n;

src/pages/HomePage.tsx
import { useTranslation } from 'react-i18next';
import { Box, Container, Typography, Paper } from '@mui/material';
import { useAuth } from '@/hooks/useAuth';
import Header from '@/components/layout/Header';

const HomePage = () => {
  const { t } = useTranslation();
  const { user } = useAuth(); // Get user info from auth state

  return (
    <>
      <Header />
      <Container maxWidth="md">
        <Box my={4}>
          <Paper elevation={3} className="p-8 text-center">
            <Typography variant="h4" component="h1" gutterBottom>
              {t('homePage.title')}
            </Typography>
            <Typography variant="body1">
              {t('homePage.content')}
            </Typography>
            {user && (
              <Box mt={4}>
                <Typography variant="h6">Welcome back, {user.email}!</Typography>
              </Box>
            )}
          </Paper>
        </Box>
      </Container>
    </>
  );
};

export default HomePage;

src/pages/LoginPage.tsx
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { useDispatch } from 'react-redux';
import {
  TextField,
  Button,
  Box,
  Typography,
  Container,
  Paper,
  Alert,
} from '@mui/material';

import { loginSchema, LoginSchema } from '@/utils/validationSchemas';
import { setCredentials } from '@/store/authSlice';
import axiosClient from '@/api/axiosClient';
import { useState } from 'react';

const LoginPage = () => {
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [error, setError] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<LoginSchema>({
    resolver: zodResolver(loginSchema),
  });

  const onSubmit = async (data: LoginSchema) => {
    setError(null);
    try {
      // Use reqres.in for a mock login
      const response: { token: string } = await axiosClient.post('/login', {
        email: data.email, // reqres.in uses 'email' not 'username'
        password: data.password,
      });

      // On successful login, dispatch credentials and navigate
      dispatch(setCredentials({ user: { email: data.email }, token: response.token }));
      navigate('/');
    } catch (err) {
      setError('Login failed. Please check your credentials.');
      console.error(err);
    }
  };

  return (
    <Container component="main" maxWidth="xs">
      <Paper elevation={6} className="mt-8 p-8 flex flex-col items-center">
        <Typography component="h1" variant="h5">
          {t('loginPage.title')}
        </Typography>
        <Box
          component="form"
          onSubmit={handleSubmit(onSubmit)}
          noValidate
          className="w-full mt-3"
        >
          {error && <Alert severity="error">{error}</Alert>}
          <TextField
            {...register('email')}
            margin="normal"
            required
            fullWidth
            id="email"
            label={t('loginPage.emailLabel')}
            autoComplete="email"
            autoFocus
            error={!!errors.email}
            helperText={errors.email?.message}
          />
          <TextField
            {...register('password')}
            margin="normal"
            required
            fullWidth
            label={t('loginPage.passwordLabel')}
            type="password"
            id="password"
            autoComplete="current-password"
            error={!!errors.password}
            helperText={errors.password?.message}
          />
          <Button
            type="submit"
            fullWidth
            variant="contained"
            sx={{ mt: 3, mb: 2 }}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Logging in...' : t('header.login')}
          </Button>
        </Box>
      </Paper>
    </Container>
  );
};

export default LoginPage;

src/pages/NotFoundPage.tsx
import { useTranslation } from 'react-i18next';
import { Box, Typography, Button, Container } from '@mui/material';
import { Link as RouterLink } from 'react-router-dom';

const NotFoundPage = () => {
  const { t } = useTranslation();

  return (
    <Container>
      <Box
        sx={{
          py: 12,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          flexDirection: 'column',
          minHeight: '100vh',
        }}
      >
        <Typography variant="h1" className="text-blue-600">
          404
        </Typography>
        <Typography variant="h4" sx={{ mt: 1, mb: 2 }}>
          {t('notFound.title')}
        </Typography>
        <Typography variant="body1" align="center" sx={{ mb: 4 }}>
          {t('notFound.message')}
        </Typography>
        <Button
          component={RouterLink}
          to="/"
          variant="contained"
          color="primary"
        >
          {t('header.home')}
        </Button>
      </Box>
    </Container>
  );
};

export default NotFoundPage;

src/routes/AppRoutes.tsx
import { lazy, Suspense } from 'react';
import {
  BrowserRouter as Router,
  Route,
  Routes,
  Navigate,
  Outlet,
} from 'react-router-dom';
import { Box, CircularProgress } from '@mui/material';
import { useAuth } from '@/hooks/useAuth';

// Lazy load pages for better code splitting
const HomePage = lazy(() => import('@/pages/HomePage'));
const LoginPage = lazy(() => import('@/pages/LoginPage'));
const NotFoundPage = lazy(() => import('@/pages/NotFoundPage'));

// A wrapper for protected routes
const ProtectedRoute = () => {
  const { isAuthenticated } = useAuth();
  return isAuthenticated ? <Outlet /> : <Navigate to="/login" replace />;
};

// A fallback component for Suspense
const SuspenseFallback = () => (
  <Box
    display="flex"
    justifyContent="center"
    alignItems="center"
    minHeight="100vh"
  >
    <CircularProgress />
  </Box>
);

const AppRoutes = () => (
  <Router>
    <Suspense fallback={<SuspenseFallback />}>
      <Routes>
        {/* Protected Routes */}
        <Route element={<ProtectedRoute />}>
          <Route path="/" element={<HomePage />} />
          {/* Add other protected routes here */}
        </Route>

        {/* Public Routes */}
        <Route path="/login" element={<LoginPage />} />
        
        {/* Not Found Route */}
        <Route path="*" element={<NotFoundPage />} />
      </Routes>
    </Suspense>
  </Router>
);

export default AppRoutes;

src/store/authSlice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface User {
  email: string;
  // Add other user properties as needed
}

interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
}

const initialState: AuthState = {
  user: null,
  token: null,
  isAuthenticated: false,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    setCredentials: (
      state,
      action: PayloadAction<{ user: User; token: string }>
    ) => {
      state.user = action.payload.user;
      state.token = action.payload.token;
      state.isAuthenticated = true;
    },
    logout: (state) => {
      state.user = null;
      state.token = null;
      state.isAuthenticated = false;
    },
  },
});

export const { setCredentials, logout } = authSlice.actions;

export default authSlice.reducer;

src/styles/main.css
@tailwind base;
@tailwind components;
@tailwind utilities;

src/styles/theme.ts
import { createTheme } from '@mui/material/styles';

// Create a theme instance.
const theme = createTheme({
  palette: {
    primary: {
      main: '#1976d2', // Blue
    },
    secondary: {
      main: '#dc004e', // Pink
    },
    background: {
      default: '#f4f6f8',
    },
  },
  typography: {
    fontFamily: 'Roboto, Arial, sans-serif',
  },
  components: {
    // Example of customizing a component
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none', // Buttons will not have uppercase text
        },
      },
    },
  },
});

export default theme;

src/types/index.ts
// Example of a shared type
export interface ApiListResponse<T> {
  page: number;
  per_page: number;
  total: number;
  total_pages: number;
  data: T[];
}

src/utils/validationSchemas.ts
import { z } from 'zod';

export const loginSchema = z.object({
  email: z
    .string()
    .min(1, 'Email is required')
    .email('Invalid email address'),
  password: z
    .string()
    .min(6, 'Password must be at least 6 characters'),
});

// Infer the type from the schema
export type LoginSchema = z.infer<typeof loginSchema>;





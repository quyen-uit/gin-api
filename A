Of course, here is a comprehensive guide to creating a startup-ready React project boilerplate with the features you've requested. This setup is designed to be scalable, maintainable, and provide a great developer experience.
🚀 React Startup Boilerplate
This boilerplate provides a solid foundation for building modern, scalable React applications. It includes a curated set of tools and practices to ensure code quality, performance, and a smooth development workflow.
Core Technologies
 * Framework: React 18 + Vite
 * Language: TypeScript
 * Styling: Tailwind CSS + Material-UI
 * State Management: Redux Toolkit + RTK Query
 * Routing: React Router
 * Forms: React Hook Form + Zod
 * Internationalization: i18next
 * API Client: Axios
 * Linting & Formatting: ESLint + Prettier
 * Git Hooks: Husky
📂 Project Structure
A well-organized project structure is key to maintainability. Here’s a recommended layout:
/src
|-- /api
|   |-- axiosClient.ts
|   |-- services
|       |-- authApi.ts
|-- /app
|   |-- store.ts
|   |-- hooks.ts
|-- /assets
|-- /components
|   |-- /common
|   |   |-- GlobalLoadingSpinner.tsx
|   |   |-- ErrorBoundary.tsx
|   |-- /ui
|       |-- Button.tsx
|-- /config
|   |-- environment.ts
|-- /features
|   |-- /auth
|   |   |-- authSlice.ts
|   |   |-- Login.tsx
|-- /hooks
|   |-- useAuth.ts
|   |-- useDebounce.ts
|-- /layouts
|   |-- MainLayout.tsx
|-- /lib
|   |-- i18n.ts
|   |-- zodSchemas.ts
|-- /pages
|   |-- HomePage.tsx
|   |-- LoginPage.tsx
|-- /routes
|   |-- AppRoutes.tsx
|   |-- ProtectedRoute.tsx
|-- /styles
|   |-- global.css
|   |-- theme.ts
|-- App.tsx
|-- main.tsx
|-- vite-env.d.ts
.env
.eslintrc.cjs
.prettierrc
postcss.config.js
tailwind.config.js
tsconfig.json
vite.config.ts

🛠️ Step-by-Step Setup
1. Initialize Project
First, create a new React project using Vite and the TypeScript template.
npm create vite@latest my-startup-app -- --template react-ts
cd my-startup-app
npm install

2. Core Dependencies Installation
Install the essential libraries for styling, state management, routing, and forms.
# MUI, Tailwind CSS, Emotions
npm install @mui/material @emotion/react @emotion/styled tailwindcss postcss autoprefixer
npx tailwindcss init -p

# Redux Toolkit & React-Redux
npm install @reduxjs/toolkit react-redux

# React Router
npm install react-router-dom

# React Hook Form & Zod
npm install react-hook-form @hookform/resolvers zod

# i18next & Axios
npm install i18next react-i18next i18next-browser-languagedetector axios

# Linting, Prettier & Husky
npm install --save-dev eslint prettier eslint-config-prettier eslint-plugin-prettier eslint-plugin-react-hooks husky
npx husky init

3. Configuration Files
Update your configuration files as follows:
tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

.eslintrc.cjs
module.exports = {
  // ... existing rules
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
    'prettier', // Add prettier to the extends array
  ],
  plugins: ['react-refresh', 'prettier'], // Add prettier to the plugins array
  rules: {
    'react-refresh/only-export-components': 'warn',
    'prettier/prettier': 'error', // Enforce prettier rules
  },
}

.prettierrc
{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "all"
}

💡 Core Implementations
Axios with Interceptors (/src/api/axiosClient.ts)
Create a centralized Axios instance to handle API requests and responses, including token injection and error handling.
import axios from 'axios';
import { store } from '../app/store';

const axiosClient = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor to add the auth token
axiosClient.interceptors.request.use(
  (config) => {
    const token = store.getState().auth.token;
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

export default axiosClient;

Redux Toolkit + RTK Query (/src/app/store.ts)
Set up your Redux store and integrate RTK Query for efficient data fetching and caching.
import { configureStore } from '@reduxjs/toolkit';
import { setupListeners } from '@reduxjs/toolkit/query';
import authReducer from '../features/auth/authSlice';
import { authApi } from '../api/services/authApi';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    [authApi.reducerPath]: authApi.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(authApi.middleware),
});

setupListeners(store.dispatch);

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

React Router with Lazy Loading (/src/routes/AppRoutes.tsx)
Implement routing with lazy loading to split your code into smaller chunks, improving initial load time.
import { lazy, Suspense } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import GlobalLoadingSpinner from '../components/common/GlobalLoadingSpinner';

const HomePage = lazy(() => import('../pages/HomePage'));
const LoginPage = lazy(() => import('../pages/LoginPage'));

const AppRoutes = () => (
  <BrowserRouter>
    <Suspense fallback={<GlobalLoadingSpinner />}>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/login" element={<LoginPage />} />
      </Routes>
    </Suspense>
  </BrowserRouter>
);

export default AppRoutes;

✨ Features & Custom Code
Custom Hooks
 * useAuth (/src/hooks/useAuth.ts): A simple hook to access authentication status.
   import { useAppSelector } from '../app/hooks';

export const useAuth = () => {
  const { user, token } = useAppSelector((state) => state.auth);
  return { isAuthenticated: !!token, user };
};

 * useDebounce (/src/hooks/useDebounce.ts): Delays invoking a function until after a certain amount of time has passed.
   import { useState, useEffect } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
}

Error Boundary (/src/components/common/ErrorBoundary.tsx)
A component to catch JavaScript errors anywhere in its child component tree.
import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
  };

  public static getDerivedStateFromError(_: Error): State {
    return { hasError: true };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return <h1>Sorry.. there was an error.</h1>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

Wrap your App component with it in main.tsx.
Role-Based Access Control (RBAC)
Protect routes and UI elements based on user roles.
ProtectedRoute.tsx
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';

interface ProtectedRouteProps {
  allowedRoles: string[];
}

const ProtectedRoute = ({ allowedRoles }: ProtectedRouteProps) => {
  const { isAuthenticated, user } = useAuth();

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  return user && allowedRoles.includes(user.role) ? (
    <Outlet />
  ) : (
    <Navigate to="/unauthorized" />
  );
};

export default ProtectedRoute;

Usage in AppRoutes.tsx
<Route element={<ProtectedRoute allowedRoles={['admin']} />}>
  <Route path="/admin" element={<AdminDashboard />} />
</Route>

Environment-Based Config (/src/config/environment.ts)
Centralize your environment variables.
// Access .env variables
export const environment = {
  apiUrl: import.meta.env.VITE_API_URL,
  apiKey: import.meta.env.VITE_API_KEY,
};

Remember to create a .env file in your root directory:
VITE_API_URL=https://api.yourapp.com
VITE_API_KEY=your-api-key

This boilerplate provides a robust starting point. You can now begin building your features on top of this solid foundation. Happy coding!
